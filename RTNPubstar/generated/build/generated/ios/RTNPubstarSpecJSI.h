/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  
#pragma mark - NativeRTNPubstarErrorCode

template <typename P0, typename P1>
struct NativeRTNPubstarErrorCode {
  P0 name;
  P1 code;
  bool operator==(const NativeRTNPubstarErrorCode &other) const {
    return name == other.name && code == other.code;
  }
};

template <typename T>
struct NativeRTNPubstarErrorCodeBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.name)>(rt, value.getProperty(rt, "name"), jsInvoker),
      bridging::fromJs<decltype(types.code)>(rt, value.getProperty(rt, "code"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::String nameToJs(jsi::Runtime &rt, decltype(types.name) value) {
    return bridging::toJs(rt, value);
  }

  static double codeToJs(jsi::Runtime &rt, decltype(types.code) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "name", bridging::toJs(rt, value.name, jsInvoker));
    result.setProperty(rt, "code", bridging::toJs(rt, value.code, jsInvoker));
    return result;
  }
};



#pragma mark - NativeRTNPubstarRewardModel

template <typename P0, typename P1>
struct NativeRTNPubstarRewardModel {
  P0 amount;
  P1 type;
  bool operator==(const NativeRTNPubstarRewardModel &other) const {
    return amount == other.amount && type == other.type;
  }
};

template <typename T>
struct NativeRTNPubstarRewardModelBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.amount)>(rt, value.getProperty(rt, "amount"), jsInvoker),
      bridging::fromJs<decltype(types.type)>(rt, value.getProperty(rt, "type"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static double amountToJs(jsi::Runtime &rt, decltype(types.amount) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String typeToJs(jsi::Runtime &rt, decltype(types.type) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "amount", bridging::toJs(rt, value.amount, jsInvoker));
    result.setProperty(rt, "type", bridging::toJs(rt, value.type, jsInvoker));
    return result;
  }
};

class JSI_EXPORT NativeRTNPubstarCxxSpecJSI : public TurboModule {
protected:
  NativeRTNPubstarCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value initialization(jsi::Runtime &rt) = 0;
  virtual void loadAd(jsi::Runtime &rt, jsi::String adId, jsi::Function onError, jsi::Function onLoaded) = 0;
  virtual void showAd(jsi::Runtime &rt, jsi::String adId, jsi::Function onHide, jsi::Function onShowed, jsi::Function onError) = 0;
  virtual void loadAndShow(jsi::Runtime &rt, jsi::String adId, jsi::Function onLoadError, jsi::Function onLoaded, jsi::Function onAdHide, jsi::Function onAdShowed, jsi::Function onError) = 0;

};

template <typename T>
class JSI_EXPORT NativeRTNPubstarCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "RTNPubstar";

protected:
  NativeRTNPubstarCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeRTNPubstarCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeRTNPubstarCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeRTNPubstarCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Value initialization(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::initialization) == 1,
          "Expected initialization(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::initialization, jsInvoker_, instance_);
    }
    void loadAd(jsi::Runtime &rt, jsi::String adId, jsi::Function onError, jsi::Function onLoaded) override {
      static_assert(
          bridging::getParameterCount(&T::loadAd) == 4,
          "Expected loadAd(...) to have 4 parameters");

      return bridging::callFromJs<void>(
          rt, &T::loadAd, jsInvoker_, instance_, std::move(adId), std::move(onError), std::move(onLoaded));
    }
    void showAd(jsi::Runtime &rt, jsi::String adId, jsi::Function onHide, jsi::Function onShowed, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::showAd) == 5,
          "Expected showAd(...) to have 5 parameters");

      return bridging::callFromJs<void>(
          rt, &T::showAd, jsInvoker_, instance_, std::move(adId), std::move(onHide), std::move(onShowed), std::move(onError));
    }
    void loadAndShow(jsi::Runtime &rt, jsi::String adId, jsi::Function onLoadError, jsi::Function onLoaded, jsi::Function onAdHide, jsi::Function onAdShowed, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::loadAndShow) == 7,
          "Expected loadAndShow(...) to have 7 parameters");

      return bridging::callFromJs<void>(
          rt, &T::loadAndShow, jsInvoker_, instance_, std::move(adId), std::move(onLoadError), std::move(onLoaded), std::move(onAdHide), std::move(onAdShowed), std::move(onError));
    }

  private:
    friend class NativeRTNPubstarCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
